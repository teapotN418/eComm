version: '3.9'

services:
  # Minio
  minio:
    image: quay.io/minio/minio:latest
    ports:
      - '${MINIO_CONSOLE}:9001'
    volumes:
      - minio_data:/data
      - ./minio_certs:/root/.minio/certs:ro
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - monitoring
    command: minio server /data --console-address :9001

  minio_service:
    container_name: minio_service
    build:
      context: ./minio_service
    ports:
      - "${MINIO_PORT}:8000"
    env_file:
      - .env
    networks:
      - monitoring

  # Users/Auth
  auth_service:
    container_name: auth_service
    build:
      context: ./auth_service
    ports:
      - "${AUTH_PORT}:8000"
    env_file:
      - .env
    depends_on:
      users_postgres:
        condition: service_healthy
    networks:
      - monitoring

  users_service:
    container_name: users_service
    build:
      context: ./users_service
    ports:
      - "${USERS_PORT}:8000"
    env_file:
      - .env
    depends_on:
      users_postgres:
        condition: service_healthy
    networks:
      - monitoring

  users_postgres:
    container_name: users_postgres
    image: postgres:16.4-alpine3.20
    volumes:
      - users_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${USERS_POSTGRES_DB} -U ${USERS_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${USERS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USERS_POSTGRES_DB}
    networks:
      - monitoring

  # Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
      - loki_wal:/wal
    user: "root"
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./loki/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  loki_data:
  loki_wal:
  grafana_data:
  minio_data:
  users_data:
