version: '3.9'

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: always
    ports:
      - "8081:80"
      - "8082:8080"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
    command:
      - "--configFile=/traefik.yml"
    networks:
      - monitoring

  auth_service:
    container_name: auth_service
    build:
      context: ./auth_service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-public.rule=Host(`localhost`) && Path(`/auth/login`)"
      - "traefik.http.routers.auth-public.entrypoints=web"
      - "traefik.http.routers.auth-public.service=auth"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"
    ports:
      - "${AUTH_PORT}:8000"
    env_file:
      - .env
    depends_on:
      users_postgres:
        condition: service_healthy
    networks:
      - monitoring





  users_service:
    container_name: users_service
    build:
      context: ./users_service
    labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.users.rule=Host(`users.localhost`)"
      # - "traefik.http.routers.users.middlewares=auth-middleware"
      # - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth_service:8000/verify"
      # - "traefik.http.middlewares.auth-middleware.forwardauth.trustForwardHeader=true"
      # - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-Id,X-User-Role"
      # - "traefik.http.services.users.loadbalancer.server.port=8000"
        - "traefik.enable=true"
        

        # Публичный маршрут /register — без авторизации
        - "traefik.http.routers.users-public.rule=Host(`localhost`) && Path(`/users/register`)"
        # - "traefik.http.routers.users-public.rule=Host(`localhost`) && Path(`/users/user-docs`)"
        - "traefik.http.routers.users-public.entrypoints=web"
        - "traefik.http.routers.users-public.service=users"
        
        # Все остальные маршруты — с авторизацией через /verify
        - "traefik.http.routers.users.rule=Host(`localhost`) && PathPrefix(`/users`)"
        - "traefik.http.routers.users.entrypoints=web"
        - "traefik.http.routers.users.middlewares=auth-middleware"
        - "traefik.http.routers.users.service=users"

        #  Middleware для авторизации
        - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth_service:8000/auth/verify"
        - "traefik.http.middlewares.auth-middleware.forwardauth.trustForwardHeader=true"
        - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-ID,X-User-Role"

        #  Service
        - "traefik.http.services.users.loadbalancer.server.port=8000"
    ports:
      - "${USERS_PORT}:8000"
    env_file:
      - .env
    depends_on:
      users_postgres:
        condition: service_healthy
    networks:
      - monitoring

  users_postgres:
    container_name: users_postgres
    image: postgres:16.4-alpine3.20
    ports:
      - "5433:${USERS_POSTGRES_PORT}"
    volumes:
      - ./mapped:/var/lib/postgresql/data
    command: -p ${USERS_POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p ${USERS_POSTGRES_PORT} -d ${USERS_POSTGRES_DB} -U ${USERS_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${USERS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USERS_POSTGRES_DB}
    networks:
      - monitoring
networks:
  monitoring:
    driver: bridge